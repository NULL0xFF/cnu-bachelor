algorithm

Initialization:
    N' = {u}
    for all nodes v
        if v adjacent to u
            then D(v) = c(u, v)
        else D(v) = inf.

Loop:
    find w not in N' such that D(w) is a minimum
        add w to N'
        update D(v) for all v adjacent to w and not in N':
            D(v) = min( D(v), D(w) + c(w, v) )
        /* new cost to v is either old cost to v or known
        shortest path cost to w plus cost from w to v */
    until all nodes in N'


sudo code

function Dijkstra(Graph, source):
    dist[source] := 0 // Distance from source to source is set to 0
    for each vertex v in Graph: // Initializations
        if v != source
            dist[v] := infinity // Unknown distance function from source to each node set to infinity
        add v to Q // All nodes initially in Q
    
    while Q is not empty: // The main loop
        v := vertex in Q with min dist[v] // In the first run-through, this vertex is the source node
        remove v from Q

        for each neighbor u of v: // where neighbor u has not yet been removed from Q.
            alt := dist[v] + length(v, u)
            if alt < dist[u]: // A shorter path to u has been found
                dist[u] := alt // Update distance of u
    
    return dist[]
end function